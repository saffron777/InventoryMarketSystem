@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase

@if (Product != null)
{
    <tr>
        <td>@Product.ProductName</td>
        <td>@Product.Quantity</td>
        <td>@Product.Price.ToString("c")</td>
        <td>
            <button type="button" class="btn btn-light" @onclick="@(()=> UpdateProduct(Product.ProducId))">Edit</button>
            <button type="button" class="btn btn-light" @onclick="@(async()=> await DeleteProduct(Product))">Delete</button>
        </td>
    </tr>
}

@code {
    [Parameter]
    public Product? Product { get; set; }

    [Parameter]
    public EventCallback OnProductDeleted { get; set; }

    private void UpdateProduct(int prodId)
    {
        NavigationManager.NavigateTo($"/editproduct/{prodId}");
    }

    private async Task DeleteProduct(Product prod)
    {
        await DeleteProductUseCase.Execute(prod.ProducId);

        await OnProductDeleted.InvokeAsync();
    }
}
