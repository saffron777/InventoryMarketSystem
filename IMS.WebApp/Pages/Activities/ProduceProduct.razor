@page "/produce"

@attribute [Authorize]

@using IMS.WebApp.ViewModels
@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<h3>Produce Product</h3>
<br />
@if (produceViewModel != null)
{
    <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="po">Production Number</label>
            <InputText id="po" @bind-Value="produceViewModel.ProductNumber" class="form-control"></InputText>

        </div>
        <div class="form-group">
            <label for="inv">Product To Produce</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct" DisplaySearchResult="true">
            </ViewProductsComponent>
            <InputText id="inv" class="form-control" disabled @bind-Value="@produceViewModel.ProductName"></InputText>
            <input type="hidden" value="@produceViewModel.ProductId" />

            @if (selectedProduct != null)
            {
                <text>Price:</text>
                @selectedProduct?.Price.ToString("c")
            }
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qyt" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct;
    private string errorMessage;
    
    private async Task OnValidSubmit()
    {
        if(!await ValidateEnoughInventoriesForProducingUseCase.ExecuteAsync(selectedProduct, this.produceViewModel.QuantityToProduce))
        {
            errorMessage = $"The inventories are not enough for producing {this.selectedProduct.ProductName} X {produceViewModel.QuantityToProduce} times";
            return;    
        }
        else
        {
            errorMessage = string.Empty;
        }


        await ProduceProductUseCase.ExecuteAsync(
            this.produceViewModel.ProductNumber,
            selectedProduct,
            this.produceViewModel.QuantityToProduce,
            "yo"
        );

        produceViewModel = new ProduceViewModel();
        selectedProduct = null;
        this.errorMessage = string.Empty;
    }

    public void OnSelectProduct(Product product)
    {
        selectedProduct = product;
        produceViewModel.ProductId = product.ProducId;
        produceViewModel.ProductName = product.ProductName;
    }
}
