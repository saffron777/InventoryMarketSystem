@page "/sell"

@attribute [Authorize]

@inject ISellProductUseCase SellProductUseCase
<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<h3>Sell Product</h3>
<br />
@if (sellViewModel != null)
{
    <EditForm Model="sellViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="po">Sales Order Number</label>
            <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>

        </div>
        <div class="form-group">
            <label for="inv">Product To Sell</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct" DisplaySearchResult="true">
            </ViewProductsComponent>
            <InputText id="inv" class="form-control" disabled @bind-Value="@sellViewModel.ProductName"></InputText>
            <input type="hidden" value="@sellViewModel.ProductId" />
        </div>

        @if (selectedProduct != null)
        {
            <text>Price:</text>
            @selectedProduct?.Price.ToString("c")
        }
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="sellViewModel.ProductPrice" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qyt" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private SellViewModel sellViewModel = new SellViewModel();
    private Product selectedProduct;
    private string errorMessage;

    private async Task OnValidSubmit()
    {
        if(this.selectedProduct.Quantity < this.sellViewModel.QuantityToSell)
        {
            this.errorMessage = $"The quantity of the product is not enough. Only {this.selectedProduct.Quantity} ar avialable";
            return;
        }
        else
        {
            this.errorMessage = string.Empty;
        }

        await SellProductUseCase.ExecuteAsync(this.sellViewModel.SalesOrderNumber, this.selectedProduct, this.sellViewModel.QuantityToSell, "yo");

        sellViewModel = new SellViewModel();
        selectedProduct = null;
        this.errorMessage = string.Empty;
    }

    public void OnSelectProduct(Product product)
    {
        selectedProduct = product;
        sellViewModel.ProductId = product.ProducId;
        sellViewModel.ProductName = product.ProductName;
        sellViewModel.ProductPrice = product.Price;
    }
}
