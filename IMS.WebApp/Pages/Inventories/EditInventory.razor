@page "/editinventory/{invId:int}"

@attribute [Authorize]

@inject IEditInventoryUseCase EditInventoryUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase 
@inject NavigationManager NavigationManager

<h3>Edit Inventory</h3>

@if(inventory!=null)
{
    <EditForm Model="inventory" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Inventory Name</label>
            <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control" ></InputText>
            
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="inventory.Quantity" class="form-control" ></InputNumber>            
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="inventory.Price" class="form-control" ></InputNumber>            
        </div>
        <br />
        <button type="submit" class="btn btn-primary" >Save</button>
    </EditForm>
}

@code {

    [Parameter]
    public int invId { get; set; }

    private Inventory? inventory;

    protected override async Task OnParametersSetAsync()
    {
       
        inventory = await ViewInventoryByIdUseCase.ExecuteAsync(invId);
    }

    private async Task OnValidSubmit()
    {
        if (inventory != null)
        {
            await EditInventoryUseCase.ExecuteAsync(inventory);

            NavigationManager.NavigateTo("/inventories");
        }
    }
}
